
# Functions take a sentence format

reverse :List.a = :List.a
reverse list = revAcc [] list
revAcc acc [] = acc
revAcc acc x::xs = revAcc x::acc xs

# Property based tests

# assert ... for .. where
assert head a == last b for reverse a b where a is :List.number
assert head a in b for reverse a b where a is :List.number

# Should translate to the following Idris

# reverse : List a -> List a
# reverse xs = revAcc [] xs where
#   revAcc : List a -> List a -> List a
#   revAcc acc [] = acc
#   revAcc acc (x :: xs) = revAcc (x :: acc) xs

